---
const { title } = Astro.props;
import { Auth } from "./Auth";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title} - EventCatalog</title>
  </head>
  <body>
    <Auth client:load />

    <script>
      import { Hub } from "aws-amplify/utils";
      import "../amplifyClient";
      import { getCurrentUser } from "@aws-amplify/auth";
      import { isBelongsTo } from "../utils/permissions";
      import parseJwt from "../utils/verifyToken";

      //function to handle accessToken fetching after user sign in
      async function handleAuthSuccess(userDetails: any) {
        const { userId } = await getCurrentUser();
        const token = localStorage.getItem(
          `CognitoIdentityServiceProvider.${import.meta.env.VITE_COGNITO_CLIENT_ID}.${userId}.accessToken`
        );
        const res = await parseJwt(token || "");
        const userGroup = await res?.["cognito:groups"];
        const hasPermission = isBelongsTo(userGroup);

        if (userDetails && hasPermission) {
          try {
            const res = await fetch("/api/set-user", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                email: userDetails.email,
                idToken: token,
                sub: userId,
              }),
            });
            const data = await res.json();
            if (data.success) {
              document.location.replace("/");
            }
          } catch (err) {
            document.location.replace("/sign-in");
          }
        }
      }

      //function to check auth after user sign in
      async function checkAuth() {
        try {
          const user = await getCurrentUser();
          const userDetails = {
            email: user.signInDetails?.loginId,
          };
          if (user.signInDetails?.loginId) {
            handleAuthSuccess(userDetails);
            return;
          }
        } catch (error) {
          console.log("User not authenticated:", error);
        }
      }

      Hub.listen("auth", ({ payload }) => {
        if (payload.event === "signedIn") {
          checkAuth();
        }
      });
    </script>
  </body>
</html>
